# 1 "mpls.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "mpls.p4"
# 1 "/usr/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */




/// Standard error codes.  New error codes can be declared by users.
error {
    NoError, /// No error.
    PacketTooShort, /// Not enough bits in packet for 'extract'.
    NoMatch, /// 'select' expression has no matches.
    StackOutOfBounds, /// Reference to invalid element of a header stack.
    HeaderTooShort, /// Extracting too many bits into a varbit field.
    ParserTimeout, /// Parser execution time limit exceeded.
    ParserInvalidArgument /// Parser operation was called with a value
                           /// not supported by the implementation.
}

extern packet_in {
    /// Read a header from the packet into a fixed-sized header @hdr and advance the cursor.
    /// May trigger error PacketTooShort or StackOutOfBounds.
    /// @T must be a fixed-size header type
    void extract<T>(out T hdr);
    /// Read bits from the packet into a variable-sized header @variableSizeHeader
    /// and advance the cursor.
    /// @T must be a header containing exactly 1 varbit field.
    /// May trigger errors PacketTooShort, StackOutOfBounds, or HeaderTooShort.
    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);
    /// Read bits from the packet without advancing the cursor.
    /// @returns: the bits read from the packet.
    /// T may be an arbitrary fixed-size type.
    T lookahead<T>();
    /// Advance the packet cursor by the specified number of bits.
    void advance(in bit<32> sizeInBits);
    /// @return packet length in bytes.  This method may be unavailable on
    /// some target architectures.
    bit<32> length();
}

extern packet_out {
    /// Write @hdr into the output packet, advancing cursor.
    /// @T can be a header type, a header stack, a header_union, or a struct
    /// containing fields with such types.
    void emit<T>(in T hdr);
}

// TODO: remove from this file, convert to built-in
/// Check a predicate @check in the parser; if the predicate is true do nothing,
/// otherwise set the parser error to @toSignal, and transition to the `reject` state.
extern void verify(in bool check, in error toSignal);

/// Built-in action that does nothing.
action NoAction() {}

/// Standard match kinds for table key fields.
/// Some architectures may not support all these match kinds.
/// Architectures can declare additional match kinds.
match_kind {
    /// Match bits exactly.
    exact,
    /// Ternary match, using a mask.
    ternary,
    /// Longest-prefix match.
    lpm
}
# 2 "mpls.p4" 2
# 1 "/usr/share/p4c/p4include/v1model.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* P4-16 declaration of the P4 v1.0 switch model */




# 1 "/usr/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */
# 23 "/usr/share/p4c/p4include/v1model.p4" 2

match_kind {
    range,
    // Used for implementing dynamic_action_selection
    selector
}

// Are these correct?
@metadata @name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    // The drop and recirculate_port fields are not used at all by the
    // behavioral-model simple_switch software switch as of September
    // 2018, and perhaps never was.  They may be considered
    // deprecated, at least for that P4 target device.  simple_switch
    // uses the value of the egress_spec field to determine whether a
    // packet is dropped or not, and it is recommended to use the
    // P4_14 drop() primitive action, or the P4_16 + v1model
    // mark_to_drop() primitive action, to cause that field to be
    // changed so the packet will be dropped.
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
    //
    // @alias is used to generate the field_alias section of the BMV2 JSON.
    // Field alias creates a mapping from the metadata name in P4 program to
    // the behavioral model's internal metadata name. Here we use it to
    // expose all metadata supported by simple switch to the user through
    // standard_metadata_t.
    //
    // flattening fields that exist in bmv2-ss
    // queueing metadata
    @alias("queueing_metadata.enq_timestamp") bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth") bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta") bit<32> deq_timedelta;
    @alias("queueing_metadata.deq_qdepth") bit<19> deq_qdepth;
    // intrinsic metadata
    @alias("intrinsic_metadata.ingress_global_timestamp") bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.egress_global_timestamp") bit<48> egress_global_timestamp;
    @alias("intrinsic_metadata.lf_field_list") bit<32> lf_field_list;
    @alias("intrinsic_metadata.mcast_grp") bit<16> mcast_grp;
    @alias("intrinsic_metadata.resubmit_flag") bit<32> resubmit_flag;
    @alias("intrinsic_metadata.egress_rid") bit<16> egress_rid;
    /// Indicates that a verify_checksum() method has failed.
    // 1 if a checksum error was found, otherwise 0.
    bit<1> checksum_error;
    @alias("intrinsic_metadata.recirculate_flag") bit<32> recirculate_flag;
    /// Error produced by parsing
    error parser_error;
}

enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}

enum MeterType {
    packets,
    bytes
}

extern counter {
    counter(bit<32> size, CounterType type);
    void count(in bit<32> index);
}

extern direct_counter {
    direct_counter(CounterType type);
    void count();
}

extern meter {
    meter(bit<32> size, MeterType type);
    void execute_meter<T>(in bit<32> index, out T result);
}

extern direct_meter<T> {
    direct_meter(MeterType type);
    void read(out T result);
}

extern register<T> {
    register(bit<32> size);
    void read(out T result, in bit<32> index);
    void write(in bit<32> index, in T value);
}

// used as table implementation attribute
extern action_profile {
    action_profile(bit<32> size);
}

// Get a random number in the range lo..hi
extern void random<T>(out T result, in T lo, in T hi);
// If the type T is a named struct, the name is used
// to generate the control-plane API.
extern void digest<T>(in bit<32> receiver, in T data);

enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}

extern void mark_to_drop();
extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);

extern action_selector {
    action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
    I2E,
    E2E
}

@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}

/**
Verifies the checksum of the supplied data.
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

/**
Verifies the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type, in bit<32> session);
extern void clone3<T>(in CloneType type, in bit<32> session, in T data);

extern void truncate(in bit<32> length);

// The name 'standard_metadata' is reserved

// Architecture.
// M should be a struct of structs
// H should be a struct of headers, stacks or header_unions

parser Parser<H, M>(packet_in b,
                    out H parsedHdr,
                    inout M meta,
                    inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
VerifyChecksum control are: block statements, calls to the
verify_checksum and verify_checksum_with_payload methods,
and return statements. */
control VerifyChecksum<H, M>(inout H hdr,
                             inout M meta);
@pipeline
control Ingress<H, M>(inout H hdr,
                      inout M meta,
                      inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H, M>(inout H hdr,
                     inout M meta,
                     inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
ComputeChecksum control are: block statements, calls to the
update_checksum and update_checksum_with_payload methods,
and return statements. */
control ComputeChecksum<H, M>(inout H hdr,
                              inout M meta);
@deparser
control Deparser<H>(packet_out b, in H hdr);

package V1Switch<H, M>(Parser<H, M> p,
                       VerifyChecksum<H, M> vr,
                       Ingress<H, M> ig,
                       Egress<H, M> eg,
                       ComputeChecksum<H, M> ck,
                       Deparser<H> dep
                       );
# 3 "mpls.p4" 2

// header 
# 1 "../codex/l2.p4" 1
/**
 * Define protocols in OSI layer 2
 * CONTRIBUTOR: Kevin Cyu (https://github.com/kevinbird61)
 */


/* Ethernet */
header ethernet_t {
    bit<48> dstAddr; // Destination MAC Address
    bit<48> srcAddr; // Source MAC Address
    bit<16> etherType; // EtherType
}

/* IEEE 802.1Q - VLAN-tagged frame */
header vlan_t {
    bit<48> dstAddr; // Destination MAC Address
    bit<48> srcAddr; // Source MAC Address
    bit<16> tpid; // Tag Protocol Identifier (TPID)
    bit<3> pcp; // Priority Code Point (PCP)
    bit<1> dei; // Drop Eligible Indicator (DEI)
    bit<12> vid; // VLAN Identifier (VID)
    bit<16> etherType; // EtherType
}
# 6 "mpls.p4" 2
# 1 "../codex/l3.p4" 1
/**
 * Define protocols in OSI layer 3 (including layer 2.5)
 * CONTRIBUTOR: Kevin Cyu (https://github.com/kevinbird61)
 */


/* Address Resolution Protocol (ARP) */
header arp_t {
    bit<16> htype; // Hardware Type (HTYPE)
    bit<16> ptype; // Protocol Type (PTYPE)
    bit<8> hlen; // Hardware Address Length (HLEN)
    bit<8> plen; // Protocol Address Length (PLAN)
    bit<16> oper; // Operation
    bit<48> srcMacAddr; // Source/Sender MAC Address
    bit<32> srcIpAddr; // Source/Sender IP Address
    bit<48> dstMacAddr; // Destination/Target MAC Address
    bit<32> dstIpAddr; // Destination/Target IP Address
}

/* Multiprotocol Label Switching (MPLS) */
header mpls_t {
    bit<20> label; // Label
    bit<3> tc; // Traffic Class (QoS and ECN)
    bit<1> s; // Bottom-of-Stack
    bit<8> ttl; // Time-to-Live (TTL)
}

/* Internet Control Message Protocol (ICMP) */
header icmp_t {
    bit<8> type; // ICMP Type
    bit<8> code; // ICMP Code
    bit<16> hdrChecksum; // Header Checksum
    bit<16> empty; // Unused   
    bit<16> nextHopMtu; // Next-hop MTU
    // FIXME:
    // Need to include "IP Header"
    // And First 8 bytes of Original Datagram's Data
    // ipv4_t ipv4;
    // bit<64> originData; 
}

/* ICMP Timestamp request/response */
header icmp_ts_t {
    bit<8> type; // ICMP Type (req: 13 / res: 14)
    bit<8> code; // ICMP Code (0)
    bit<16> hdrChecksum; // Header Checksum
    bit<16> identifier; // Identifier
    bit<16> seq; // Sequence Number
    bit<32> originTs; // Originate Timestamp
    bit<32> recvTs; // Receive Timestamp
    bit<32> tranTs; // Transmit Timestamp
}

/* Internet Protocol version 4 (IPv4) */
header ipv4_t {
    bit<4> version; // Version   
    bit<4> ihl; // Internet Header Length (IHL)
    bit<6> dscp; // Differentiated Services Code Point (DSCP)
    bit<2> ecn; // ECN
    bit<16> totalLen; // Total Length
    bit<16> identification; // Identification
    bit<3> flags; // Flags
    bit<13> fragOffset; // Fragment Offset
    bit<8> ttl; // Time-to-Live (TTL)
    bit<8> protocol; // Protocol
    bit<16> hdrChecksum; // Header Checksum
    bit<32> srcAddr; // Source Address
    bit<32> dstAddr; // Destination Address
}

/* Internet Protocol version 6 (IPv6) */
header ipv6_t {
    bit<4> Version; // Version
    bit<8> trafficClass; // Traffic Class
    bit<20> flowLabel; // Flow Label
    bit<16> payloadLen; // Payload Length
    bit<8> nextHeader; // Next Header
    bit<8> hopLimit; // Hop Limit
    bit<128> srcAddr; // Source Address
    bit<128> dstAddr; // Destination Address
}
# 7 "mpls.p4" 2

// enum
# 1 "../codex/enum.p4" 1
/**
 * Define EtherType and IP protocol number
 * CONTRIBUTOR: Kevin Cyu (https://github.com/kevinbird61)
 */


/* EtherType (https://en.wikipedia.org/wiki/EtherType) */
const bit<16> TYPE_IPV4 = 0x0800; // Internet Protocol version 4 (IPv4)
const bit<16> TYPE_ARP = 0x0806; // Address Resolution Protocol (ARP)
const bit<16> TYPE_VLAN = 0x8100; // VLAN-tagged frame (IEEE 802.1Q)
const bit<16> TYPE_IPV6 = 0x86DD; // Internet Protocol version 6 (IPv6)
const bit<16> TYPE_MPLS_uni = 0x8847; // MPLS unicast
const bit<16> TYPE_MPLS_mul = 0x8848; // MPLS multicast

/* IP protocol number (https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers) */
const bit<8> PROTO_ICMP = 1; // Internet Control Message Protocol (ICMP)
const bit<8> PROTO_IPV4 = 4; // IPv4 Encapsulation
const bit<8> PROTO_TCP = 6; // Transmission Control Protocol (TCP)
const bit<8> PROTO_UDP = 17; // User Datagram Protocol (UDP)
const bit<8> PROTO_IPV6 = 41; // IPv6 Encapsulation

// INT 
const bit<6> DSCP_INT = 0x17;

// INT Header type - destination and hop-by-hop
const bit<8> INT_TYPE_DST = 0x1;
const bit<8> INT_TYPE_HOP = 0x2;
# 10 "mpls.p4" 2

// define our headers
struct headers {
    ethernet_t ethernet;
    mpls_t mpls;
    ipv4_t ipv4;
}

struct metadata_t {

}

/*
    Basic Parser
*/
parser Basic_parser(
    packet_in packet,
    out headers hdr,
    inout metadata_t metadata,
    inout standard_metadata_t standard_metadata
){
    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType){
            TYPE_MPLS_uni: parse_mpls;
            TYPE_IPV4: parse_ipv4;
            default: accept;
        }
    }

    state parse_mpls {
        packet.extract(hdr.mpls);
        transition accept;
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition accept;
    }
}

/*
    Verify checksum
*/
control Basic_verifyCk(
    inout headers hdr,
    inout metadata_t metadata
){
    // TODO
    apply {

    }
}

/*
    Basic ingress
*/
control Basic_ingress(
    inout headers hdr,
    inout metadata_t metadata,
    inout standard_metadata_t standard_metadata
){
    action drop() {
        mark_to_drop();
    }

    // ipv4 forward table
    action ipv4_forward(bit<48> dstAddr, bit<9> port){
        standard_metadata.egress_spec = port;
        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
        hdr.ethernet.dstAddr = dstAddr;
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
    }

    action mpls_ingress(bit<9> port, bit<20> new_label){
        standard_metadata.egress_spec = port;
        // set EtherType
        hdr.ethernet.etherType = TYPE_MPLS_uni;
        // new mpls
        hdr.mpls.setValid();
        hdr.mpls.label = new_label;
    }

    // mpls forward
    action mpls_core(bit<9> port, bit<20> new_label){
        standard_metadata.egress_spec = port;
        // change new label
        hdr.mpls.setValid();
        hdr.mpls.label = new_label;
    }

    action mpls_egress(bit<48> dstAddr, bit<9> port){
        standard_metadata.egress_spec = port;
        hdr.ethernet.etherType = TYPE_IPV4;
        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
        hdr.ethernet.dstAddr = dstAddr;
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
        // remove MPLS Layer
        hdr.mpls.setInvalid();
    }

    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr: lpm;
        }
        actions = {
            ipv4_forward;
            mpls_ingress;
            drop;
            NoAction;
        }
        size = 1024;
        default_action = NoAction();
    }

    table mpls_exact {
        key = {
            hdr.mpls.label: exact;
        }
        actions = {
            mpls_core;
            mpls_egress;
            drop;
            NoAction;
        }
        size = 1024;
        default_action = NoAction();
    }

    apply {
        if(hdr.mpls.isValid()){
            mpls_exact.apply();
        }

        if(hdr.ipv4.isValid()){
            ipv4_lpm.apply();
        }
    }
}

/*
    Basic Egress
*/
control Basic_egress(
    inout headers hdr,
    inout metadata_t meta,
    inout standard_metadata_t standard_metadata
){
    apply {

    }
}

/*
    Basic Compute Checksum
*/
control Basic_computeCk(
    inout headers hdr,
    inout metadata_t metadata
){
    apply {
        update_checksum(
            hdr.ipv4.isValid(),
            {
                hdr.ipv4.version,
                hdr.ipv4.ihl,
                hdr.ipv4.dscp,
                hdr.ipv4.ecn,
                hdr.ipv4.totalLen,
                hdr.ipv4.identification,
                hdr.ipv4.flags,
                hdr.ipv4.fragOffset,
                hdr.ipv4.ttl,
                hdr.ipv4.protocol,
                hdr.ipv4.srcAddr,
                hdr.ipv4.dstAddr
            },
            hdr.ipv4.hdrChecksum,
            HashAlgorithm.csum16
        );
    }
}

/*
    Basic Deparser
*/
control Basic_deparser(
    packet_out packet,
    in headers hdr
){
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.mpls);
        packet.emit(hdr.ipv4);
    }

}

V1Switch(
    Basic_parser(),
    Basic_verifyCk(),
    Basic_ingress(),
    Basic_egress(),
    Basic_computeCk(),
    Basic_deparser()
) main;

// v1model
/*
V1Switch(
    parser,
    verifyChecksum
    ingress,
    egress,
    computeChecksum,
    deparser
)*/
