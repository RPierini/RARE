# 1 "vpn-over-bgp-isis-sr-operation-core1-ler.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "vpn-over-bgp-isis-sr-operation-core1-ler.p4"
/*
 * P4 language version: P4_16 
 */

/*
 * include P4 core library 
 */
# 1 "/usr/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */




/// Standard error codes.  New error codes can be declared by users.
error {
    NoError, /// No error.
    PacketTooShort, /// Not enough bits in packet for 'extract'.
    NoMatch, /// 'select' expression has no matches.
    StackOutOfBounds, /// Reference to invalid element of a header stack.
    HeaderTooShort, /// Extracting too many bits into a varbit field.
    ParserTimeout, /// Parser execution time limit exceeded.
    ParserInvalidArgument /// Parser operation was called with a value
                           /// not supported by the implementation.
}

extern packet_in {
    /// Read a header from the packet into a fixed-sized header @hdr and advance the cursor.
    /// May trigger error PacketTooShort or StackOutOfBounds.
    /// @T must be a fixed-size header type
    void extract<T>(out T hdr);
    /// Read bits from the packet into a variable-sized header @variableSizeHeader
    /// and advance the cursor.
    /// @T must be a header containing exactly 1 varbit field.
    /// May trigger errors PacketTooShort, StackOutOfBounds, or HeaderTooShort.
    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);
    /// Read bits from the packet without advancing the cursor.
    /// @returns: the bits read from the packet.
    /// T may be an arbitrary fixed-size type.
    T lookahead<T>();
    /// Advance the packet cursor by the specified number of bits.
    void advance(in bit<32> sizeInBits);
    /// @return packet length in bytes.  This method may be unavailable on
    /// some target architectures.
    bit<32> length();
}

extern packet_out {
    /// Write @hdr into the output packet, advancing cursor.
    /// @T can be a header type, a header stack, a header_union, or a struct
    /// containing fields with such types.
    void emit<T>(in T hdr);
}

// TODO: remove from this file, convert to built-in
/// Check a predicate @check in the parser; if the predicate is true do nothing,
/// otherwise set the parser error to @toSignal, and transition to the `reject` state.
extern void verify(in bool check, in error toSignal);

/// Built-in action that does nothing.
action NoAction() {}

/// Standard match kinds for table key fields.
/// Some architectures may not support all these match kinds.
/// Architectures can declare additional match kinds.
match_kind {
    /// Match bits exactly.
    exact,
    /// Ternary match, using a mask.
    ternary,
    /// Longest-prefix match.
    lpm
}
# 9 "vpn-over-bgp-isis-sr-operation-core1-ler.p4" 2

/* 
 * include P4 v1model library implemented by simple_switch 
 */
# 1 "/usr/share/p4c/p4include/v1model.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* P4-16 declaration of the P4 v1.0 switch model */




# 1 "/usr/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */
# 23 "/usr/share/p4c/p4include/v1model.p4" 2

match_kind {
    range,
    // Used for implementing dynamic_action_selection
    selector
}

// Are these correct?
@metadata @name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    // The drop and recirculate_port fields are not used at all by the
    // behavioral-model simple_switch software switch as of September
    // 2018, and perhaps never was.  They may be considered
    // deprecated, at least for that P4 target device.  simple_switch
    // uses the value of the egress_spec field to determine whether a
    // packet is dropped or not, and it is recommended to use the
    // P4_14 drop() primitive action, or the P4_16 + v1model
    // mark_to_drop() primitive action, to cause that field to be
    // changed so the packet will be dropped.
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
    //
    // @alias is used to generate the field_alias section of the BMV2 JSON.
    // Field alias creates a mapping from the metadata name in P4 program to
    // the behavioral model's internal metadata name. Here we use it to
    // expose all metadata supported by simple switch to the user through
    // standard_metadata_t.
    //
    // flattening fields that exist in bmv2-ss
    // queueing metadata
    @alias("queueing_metadata.enq_timestamp")
    bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth")
    bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta")
    bit<32> deq_timedelta;
    /// queue depth at the packet dequeue time.
    @alias("queueing_metadata.deq_qdepth")
    bit<19> deq_qdepth;

    // intrinsic metadata
    @alias("intrinsic_metadata.ingress_global_timestamp")
    bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.egress_global_timestamp")
    bit<48> egress_global_timestamp;
    /// Learn filter field list
    @alias("intrinsic_metadata.lf_field_list")
    bit<32> lf_field_list;
    /// multicast group id (key for the mcast replication table)
    @alias("intrinsic_metadata.mcast_grp")
    bit<16> mcast_grp;
    /// resubmit metadata field list id, or 0 if no resubmit operation has been performed
    @alias("intrinsic_metadata.resubmit_flag")
    bit<32> resubmit_flag;
    /// Replication ID for multicast
    @alias("intrinsic_metadata.egress_rid")
    bit<16> egress_rid;
    @alias("intrinsic_metadata.recirculate_flag")
    bit<32> recirculate_flag;
    /// Indicates that a verify_checksum() method has failed.
    /// 1 if a checksum error was found, otherwise 0.
    bit<1> checksum_error;
    /// Error produced by parsing
    error parser_error;
    /// set packet priority
    @alias("intrinsic_metadata.priority")
    bit<3> priority;
}

enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}

enum MeterType {
    packets,
    bytes
}

extern counter {
    counter(bit<32> size, CounterType type);
    /***
     * count() causes the counter state with the specified index to be
     * read, modified, and written back, atomically relative to the
     * processing of other packets, updating the packet count, byte
     * count, or both, depending upon the CounterType of the counter
     * instance used when it was constructed.
     *
     * @param index The index of the counter state in the array to be
     *              updated, normally a value in the range [0,
     *              size-1].  If index >= size, no counter state will be
     *              updated.
     */
    void count(in bit<32> index);
}

extern direct_counter {
    /***
     * A direct_counter object is created by calling its constructor.
     * You must provide a choice of whether to maintain only a packet
     * count (CounterType.packets), only a byte count
     * (CounterType.bytes), or both (CounterType.packets_and_bytes).
     * After constructing the object, you can associate it with at
     * most one table, by adding the following table property to the
     * definition of that table:
     *
     *     counters = <object_name>;
     */
    direct_counter(CounterType type);
    /***
     * The count() method is actually unnecessary in the v1model
     * architecture.  This is because after a direct_counter object
     * has been associated with a table as described in the
     * documentation for the direct_counter constructor, every time
     * the table is applied and a table entry is matched, the counter
     * state associated with the matching entry is read, modified, and
     * written back, atomically relative to the processing of other
     * packets, regardless of whether the count() method is called in
     * the body of that action.
     */
    void count();
}





extern meter {
    meter(bit<32> size, MeterType type);
    /***
     * execute_meter() causes the meter state with the specified index
     * to be read, modified, and written back, atomically relative to
     * the processing of other packets, and an integer encoding of one
     * of the colors green, yellow, or red to be written to the result
     * out parameter.
     *
     * @param index The index of the meter state in the array to be
     *              updated, normally a value in the range [0,
     *              size-1].  If index >= size, no meter state will be
     *              updated.
     * @param result Type T must be bit<W> with W >= 2.  When index is
     *              in range, the value of result will be assigned 0
     *              for color GREEN, 1 for color YELLOW, and 2 for
     *              color RED (see RFC 2697 and RFC 2698 for the
     *              meaning of these colors).  When index is out of
     *              range, the final value of result is not specified,
     *              and should be ignored by the caller.
     */
    void execute_meter<T>(in bit<32> index, out T result);
}

extern direct_meter<T> {
    /***
     * A direct_meter object is created by calling its constructor.
     * You must provide a choice of whether to meter based on the
     * number of packets, regardless of their size
     * (MeterType.packets), or based upon the number of bytes the
     * packets contain (MeterType.bytes).  After constructing the
     * object, you can associate it with at most one table, by adding
     * the following table property to the definition of that table:
     *
     *     meters = <object_name>;
     */
    direct_meter(MeterType type);
    /***
     * After a direct_meter object has been associated with a table as
     * described in the documentation for the direct_meter
     * constructor, every time the table is applied and a table entry
     * is matched, the meter state associated with the matching entry
     * is read, modified, and written back, atomically relative to the
     * processing of other packets, regardless of whether the read()
     * method is called in the body of that action.
     *
     * read() may only be called within an action executed as a result
     * of matching a table entry, of a table that has a direct_meter
     * associated with it.  Calling read() causes an integer encoding
     * of one of the colors green, yellow, or red to be written to the
     * result out parameter.
     *
     * @param result Type T must be bit<W> with W >= 2.  The value of
     *              result will be assigned 0 for color GREEN, 1 for
     *              color YELLOW, and 2 for color RED (see RFC 2697
     *              and RFC 2698 for the meaning of these colors).
     */
    void read(out T result);
}

extern register<T> {
    register(bit<32> size);
    /***
     * read() reads the state of the register array stored at the
     * specified index, and returns it as the value written to the
     * result parameter.
     *
     * @param index The index of the register array element to be
     *              read, normally a value in the range [0, size-1].
     * @param result Only types T that are bit<W> are currently
     *              supported.  When index is in range, the value of
     *              result becomes the value read from the register
     *              array element.  When index >= size, the final
     *              value of result is not specified, and should be
     *              ignored by the caller.
     */
    void read(out T result, in bit<32> index);
    /***
     * write() writes the state of the register array at the specified
     * index, with the value provided by the value parameter.
     *
     * If you wish to perform a read() followed later by a write() to
     * the same register array element, and you wish the
     * read-modify-write sequence to be atomic relative to other
     * processed packets, then there may be parallel implementations
     * of the v1model architecture for which you must execute them in
     * a P4_16 block annotated with an @atomic annotation.  See the
     * P4_16 language specification description of the @atomic
     * annotation for more details.
     *
     * @param index The index of the register array element to be
     *              written, normally a value in the range [0,
     *              size-1].  If index >= size, no register state will
     *              be updated.
     * @param value Only types T that are bit<W> are currently
     *              supported.  When index is in range, this
     *              parameter's value is written into the register
     *              array element specified by index.
     */
    void write(in bit<32> index, in T value);
}

// used as table implementation attribute
extern action_profile {
    action_profile(bit<32> size);
}

/***
 * Generate a random number in the range lo..hi, inclusive, and write
 * it to the result parameter.  The value written to result is not
 * specified if lo > hi.
 *
 * @param T          Must be a type bit<W>
 */
extern void random<T>(out T result, in T lo, in T hi);

// If the type T is a named struct, the name is used
// to generate the control-plane API.
extern void digest<T>(in bit<32> receiver, in T data);

enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}

@deprecated("Please use mark_to_drop(standard_metadata) instead.")
extern void mark_to_drop();

/***
 * mark_to_drop(standard_metadata) is a primitive action that modifies
 * standard_metadata.egress_spec to an implementation-specific special
 * value that in some cases causes the packet to be dropped at the end
 * of ingress or egress processing.  It also assigns 0 to
 * standard_metadata.mcast_grp.  Either of those metadata fields may
 * be changed by executing later P4 code, after calling
 * mark_to_drop(), and this can change the resulting behavior of the
 * packet to do something other than drop.
 *
 * See
 * https://github.com/p4lang/behavioral-model/blob/master/docs/simple_switch.md
 * -- in particular the section "Pseudocode for what happens at the
 * end of ingress and egress processing" -- for the relative priority
 * of the different possible things that can happen to a packet when
 * ingress and egress processing are complete.
 */
extern void mark_to_drop(inout standard_metadata_t standard_metadata);

/***
 * Calculate a hash function of the value specified by the data
 * parameter.  The value written to the out parameter named result
 * will always be in the range [base, base+max-1] inclusive, if max >=
 * 1.  If max=0, the value written to result will always be base.
 *
 * @param O          Must be a type bit<W>
 * @param D          Must be a tuple type where all the fields are bit-fields (type bit<W> or int<W>) or varbits.
 * @param T          Must be a type bit<W>
 * @param M          Must be a type bit<W>
 */
extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);

extern action_selector {
    action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
    I2E,
    E2E
}

@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}

/**
Verifies the checksum of the supplied data.
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the tuple elements are of type bit<W>, int<W>, or varbit<W>.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data.
@param T          Must be a tuple type where all the tuple elements are of type bit<W>, int<W>, or varbit<W>.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

/**
Verifies the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the tuple elements are of type bit<W>, int<W>, or varbit<W>.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
@param T          Must be a tuple type where all the tuple elements are of type bit<W>, int<W>, or varbit<W>.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type, in bit<32> session);
extern void clone3<T>(in CloneType type, in bit<32> session, in T data);

extern void truncate(in bit<32> length);

// The name 'standard_metadata' is reserved

// Architecture.
// M should be a struct of structs
// H should be a struct of headers, stacks or header_unions

parser Parser<H, M>(packet_in b,
                    out H parsedHdr,
                    inout M meta,
                    inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
VerifyChecksum control are: block statements, calls to the
verify_checksum and verify_checksum_with_payload methods,
and return statements. */
control VerifyChecksum<H, M>(inout H hdr,
                             inout M meta);
@pipeline
control Ingress<H, M>(inout H hdr,
                      inout M meta,
                      inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H, M>(inout H hdr,
                     inout M meta,
                     inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
ComputeChecksum control are: block statements, calls to the
update_checksum and update_checksum_with_payload methods,
and return statements. */
control ComputeChecksum<H, M>(inout H hdr,
                              inout M meta);

/* The only legal statements in a Deparser control are: calls to the
packet_out.emit() method. */
@deparser
control Deparser<H>(packet_out b, in H hdr);

package V1Switch<H, M>(Parser<H, M> p,
                       VerifyChecksum<H, M> vr,
                       Ingress<H, M> ig,
                       Egress<H, M> eg,
                       ComputeChecksum<H, M> ck,
                       Deparser<H> dep
                       );
# 14 "vpn-over-bgp-isis-sr-operation-core1-ler.p4" 2

/*
 * include Ethertype mapping 
 */
# 1 "./include/ethertype.p4" 1
/*
 * Copyright 2019-present GÉANT RARE project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed On an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// source here: 
// https://www.iana.org/assignments/ieee-802-numbers/ieee-802-numbers.xhtml 

const bit<16> ETHERTYPE_IPV4 = 0x0800;
const bit<16> ETHERTYPE_ARP = 0x0806;
const bit<16> ETHERTYPE_WOL = 0x0842;
const bit<16> ETHERTYPE_TRILL = 0x22f3;
const bit<16> ETHERTYPE_SRVP = 0x22ea;
const bit<16> ETHERTYPE_DECNET = 0x6003;
const bit<16> ETHERTYPE_ETHERNET = 0x6558;
const bit<16> ETHERTYPE_RARP = 0x8035;
const bit<16> ETHERTYPE_ETHERTALK = 0x809b;
const bit<16> ETHERTYPE_AARP = 0x80f3;
const bit<16> ETHERTYPE_VLAN = 0x8100;
const bit<16> ETHERTYPE_IPX = 0x8137;
const bit<16> ETHERTYPE_NOVELL = 0x8138;
const bit<16> ETHERTYPE_QNX_QNET = 0x8204;
const bit<16> ETHERTYPE_IPV6 = 0x86dd;
const bit<16> ETHERTYPE_ETHERNET_FC = 0x8808;
const bit<16> ETHERTYPE_LACP = 0x8809;
const bit<16> ETHERTYPE_COBRANET = 0x8819;
const bit<16> ETHERTYPE_MPLS_UCAST = 0x8847;
const bit<16> ETHERTYPE_MPLS_MCAST = 0x8848;
const bit<16> ETHERTYPE_PPPOE_DISCOVERY = 0x8863;
const bit<16> ETHERTYPE_PPPOE_SESSION = 0x8864;
const bit<16> ETHERTYPE_INTEL_ADV_NET_SVC = 0x8864;
const bit<16> ETHERTYPE_JUMBO_FRAMES = 0x8870;
const bit<16> ETHERTYPE_HOME_PLUG = 0x887b;
const bit<16> ETHERTYPE_EAPOLAN = 0x888e;
const bit<16> ETHERTYPE_PROFINET = 0x8892;
const bit<16> ETHERTYPE_ETHERSOUND = 0x8896;
const bit<16> ETHERTYPE_HYPERSCSI = 0x889a;
const bit<16> ETHERTYPE_ATAOETHERNET = 0x88a2;
const bit<16> ETHERTYPE_ETHERCAT = 0x88a4;
const bit<16> ETHERTYPE_PBB_SPB = 0x88a8;
const bit<16> ETHERTYPE_POWERLINK = 0x88ab;
const bit<16> ETHERTYPE_GOOSE = 0x88b8;
const bit<16> ETHERTYPE_GSE_MS = 0x88b9;
const bit<16> ETHERTYPE_SVT = 0x88ba;
const bit<16> ETHERTYPE_LLDP = 0x88cc;
const bit<16> ETHERTYPE_SERCOS = 0x88cd;
const bit<16> ETHERTYPE_WSMP = 0x88dc;
const bit<16> ETHERTYPE_HOMEPLUG_AV_MME = 0x88e1;
const bit<16> ETHERTYPE_MRP = 0x88e3;
const bit<16> ETHERTYPE_MAC_SEC = 0x88e5;
const bit<16> ETHERTYPE_PBB = 0x88e7;
const bit<16> ETHERTYPE_PTP = 0x88f7;
const bit<16> ETHERTYPE_NC_SI = 0x88f8;
const bit<16> ETHERTYPE_PRP = 0x88fb;
const bit<16> ETHERTYPE_CFM = 0x8902;
const bit<16> ETHERTYPE_FCOE = 0x8906;
const bit<16> ETHERTYPE_FCOE_INIT = 0x8914;
const bit<16> ETHERTYPE_ROCE = 0x8915;
const bit<16> ETHERTYPE_TTE = 0x891d;
const bit<16> ETHERTYPE_VNTAG = 0x8926;
const bit<16> ETHERTYPE_HSR = 0x892f;
const bit<16> ETHERTYPE_NSH = 0x894f;
const bit<16> ETHERTYPE_ETHERNET_CTP = 0x9000;
const bit<16> ETHERTYPE_QINQ = 0x9100;
const bit<16> ETHERTYPE_VERITAS_LLT = 0xCAFE;
# 19 "vpn-over-bgp-isis-sr-operation-core1-ler.p4" 2

/* 
 * include IP protocol mapping 
 */
# 1 "./include/ip-protocol.p4" 1
/*
 * Copyright 2019-present GÉANT RARE project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed On an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// source here: 
// https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml

const bit<8> IP_PROTOCOL_HOPOPT = 0;
const bit<8> IP_PROTOCOL_ICMP = 1;
const bit<8> IP_PROTOCOL_IGMP = 2;
const bit<8> IP_PROTOCOL_GGP = 3;
const bit<8> IP_PROTOCOL_IPV4 = 4;
const bit<8> IP_PROTOCOL_ST = 5;
const bit<8> IP_PROTOCOL_TCP = 6;
const bit<8> IP_PROTOCOL_CBT = 7;
const bit<8> IP_PROTOCOL_EGP = 8;
const bit<8> IP_PROTOCOL_IGP = 9;
const bit<8> IP_PROTOCOL_BBN_RCC_MON = 10;
const bit<8> IP_PROTOCOL_NVP_II = 11;
const bit<8> IP_PROTOCOL_PUP = 12;
const bit<8> IP_PROTOCOL_ARGUS = 13;
const bit<8> IP_PROTOCOL_EMCON = 14;
const bit<8> IP_PROTOCOL_XNET = 15;
const bit<8> IP_PROTOCOL_CHAOS = 16;
const bit<8> IP_PROTOCOL_UDP = 17;
const bit<8> IP_PROTOCOL_MUX = 18;
const bit<8> IP_PROTOCOL_DCN_MEAS = 19;
const bit<8> IP_PROTOCOL_HMP = 20;
const bit<8> IP_PROTOCOL_PRM = 21;
const bit<8> IP_PROTOCOL_XNS_IDP = 22;
const bit<8> IP_PROTOCOL_TRUNK_1 = 23;
const bit<8> IP_PROTOCOL_TRUNK_2 = 24;
const bit<8> IP_PROTOCOL_LEAF_1 = 25;
const bit<8> IP_PROTOCOL_LEAF_2 = 26;
const bit<8> IP_PROTOCOL_RDP = 27;
const bit<8> IP_PROTOCOL_IRTP = 28;
const bit<8> IP_PROTOCOL_ISO_TP4 = 29;
const bit<8> IP_PROTOCOL_NETBLT = 30;
const bit<8> IP_PROTOCOL_MFE_NSP = 31;
const bit<8> IP_PROTOCOL_MERIT_INP = 32;
const bit<8> IP_PROTOCOL_DCCP = 33;
const bit<8> IP_PROTOCOL_3PC = 34;
const bit<8> IP_PROTOCOL_IDPR = 35;
const bit<8> IP_PROTOCOL_XTP = 36;
const bit<8> IP_PROTOCOL_DDP = 37;
const bit<8> IP_PROTOCOL_IDPR_CMTP = 38;
const bit<8> IP_PROTOCOL_TP = 39;
const bit<8> IP_PROTOCOL_IL = 40;
const bit<8> IP_PROTOCOL_IPV6 = 41;
const bit<8> IP_PROTOCOL_SDRP = 42;
const bit<8> IP_PROTOCOL_IPV6_ROUTE = 43;
const bit<8> IP_PROTOCOL_IPV6_FRAG = 44;
const bit<8> IP_PROTOCOL_IDRP = 45;
const bit<8> IP_PROTOCOL_RSVP = 46;
const bit<8> IP_PROTOCOL_GRE = 47;
const bit<8> IP_PROTOCOL_DSR = 48;
const bit<8> IP_PROTOCOL_BNA = 49;
const bit<8> IP_PROTOCOL_ESP = 50;
const bit<8> IP_PROTOCOL_AH = 51;
const bit<8> IP_PROTOCOL_I_NLSP = 52;
const bit<8> IP_PROTOCOL_SWIPE = 53;
const bit<8> IP_PROTOCOL_NARP = 54;
const bit<8> IP_PROTOCOL_MOBILE = 55;
const bit<8> IP_PROTOCOL_TLSP = 56;
const bit<8> IP_PROTOCOL_SKIP = 57;
const bit<8> IP_PROTOCOL_IPV6_ICMP = 58;
const bit<8> IP_PROTOCOL_IPV6_NONXT = 59;
const bit<8> IP_PROTOCOL_IPV6_OPTS = 60;
const bit<8> IP_PROTOCOL_CFTP = 62;
const bit<8> IP_PROTOCOL_SAT_EXPAK = 64;
const bit<8> IP_PROTOCOL_KRYPTOLAN = 65;
const bit<8> IP_PROTOCOL_RVD = 66;
const bit<8> IP_PROTOCOL_IPPC = 67;
const bit<8> IP_PROTOCOL_SAT_MON = 69;
const bit<8> IP_PROTOCOL_VISA = 70;
const bit<8> IP_PROTOCOL_IPCV = 71;
const bit<8> IP_PROTOCOL_CPNX = 72;
const bit<8> IP_PROTOCOL_CPHB = 73;
const bit<8> IP_PROTOCOL_WSN = 74;
const bit<8> IP_PROTOCOL_PVP = 75;
const bit<8> IP_PROTOCOL_BR_SAT_MON = 76;
const bit<8> IP_PROTOCOL_SUN_ND = 77;
const bit<8> IP_PROTOCOL_WB_MON = 78;
const bit<8> IP_PROTOCOL_WB_EXPAK = 79;
const bit<8> IP_PROTOCOL_ISO_IP = 80;
const bit<8> IP_PROTOCOL_VMTP = 81;
const bit<8> IP_PROTOCOL_SECURE_VMTP = 82;
const bit<8> IP_PROTOCOL_VINES = 83;
const bit<8> IP_PROTOCOL_TTP = 84;
const bit<8> IP_PROTOCOL_IPTM = 84;
const bit<8> IP_PROTOCOL_NSFNET_IGP = 85;
const bit<8> IP_PROTOCOL_DGP = 86;
const bit<8> IP_PROTOCOL_TCF = 87;
const bit<8> IP_PROTOCOL_EIGRP = 88;
const bit<8> IP_PROTOCOL_OSPFIGP = 89;
const bit<8> IP_PROTOCOL_SPRITE_RPC = 90;
const bit<8> IP_PROTOCOL_LARP = 91;
const bit<8> IP_PROTOCOL_MTP = 92;
const bit<8> IP_PROTOCOL_AX25 = 93;
const bit<8> IP_PROTOCOL_IPIP = 94;
const bit<8> IP_PROTOCOL_MICP = 95;
const bit<8> IP_PROTOCOL_SCC_SP = 96;
const bit<8> IP_PROTOCOL_ETHERIP = 97;
const bit<8> IP_PROTOCOL_ENCAP = 98;
const bit<8> IP_PROTOCOL_GMTP = 100;
const bit<8> IP_PROTOCOL_IFMP = 101;
const bit<8> IP_PROTOCOL_PNNI = 102;
const bit<8> IP_PROTOCOL_PIM = 103;
const bit<8> IP_PROTOCOL_ARIS = 104;
const bit<8> IP_PROTOCOL_SCPS = 105;
const bit<8> IP_PROTOCOL_QNX = 106;
const bit<8> IP_PROTOCOL_A_N = 107;
const bit<8> IP_PROTOCOL_IPCOMP = 108;
const bit<8> IP_PROTOCOL_SNP = 109;
const bit<8> IP_PROTOCOL_COMPAQ_PEER = 110;
const bit<8> IP_PROTOCOL_IPX_IN_IP = 111;
const bit<8> IP_PROTOCOL_VRRP = 112;
const bit<8> IP_PROTOCOL_PGM = 113;
const bit<8> IP_PROTOCOL_L2TP = 115;
const bit<8> IP_PROTOCOL_DDX = 116;
const bit<8> IP_PROTOCOL_IATP = 117;
const bit<8> IP_PROTOCOL_STP = 118;
const bit<8> IP_PROTOCOL_SRP = 119;
const bit<8> IP_PROTOCOL_UTI = 120;
const bit<8> IP_PROTOCOL_SMP = 121;
const bit<8> IP_PROTOCOL_SM = 122;
const bit<8> IP_PROTOCOL_PTP = 123;
const bit<8> IP_PROTOCOL_ISISoIPV4 = 124;
const bit<8> IP_PROTOCOL_FIRE = 125;
const bit<8> IP_PROTOCOL_CRTP = 126;
const bit<8> IP_PROTOCOL_CRUDP = 127;
const bit<8> IP_PROTOCOL_SSCOPMCE = 128;
const bit<8> IP_PROTOCOL_IPLT = 129;
const bit<8> IP_PROTOCOL_SPS = 130;
const bit<8> IP_PROTOCOL_PIPE = 131;
const bit<8> IP_PROTOCOL_SCTP = 132;
const bit<8> IP_PROTOCOL_FC = 133;
const bit<8> IP_PROTOCOL_RSVP_E2E_IGNORE = 134;
const bit<8> IP_PROTOCOL_MOBILITY_HEADER = 135;
const bit<8> IP_PROTOCOL_UDPLITE = 136;
const bit<8> IP_PROTOCOL_MPLS_IN_IP = 137;
const bit<8> IP_PROTOCOL_MANET = 138;
const bit<8> IP_PROTOCOL_HIP = 139;
const bit<8> IP_PROTOCOL_SHIM6 = 140;
const bit<8> IP_PROTOCOL_WESP = 141;
const bit<8> IP_PROTOCOL_ROHC = 142;
# 24 "vpn-over-bgp-isis-sr-operation-core1-ler.p4" 2

/* 
 * include P4 table size declaration 
 */
# 1 "./include/p4-table.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc. 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
# 29 "vpn-over-bgp-isis-sr-operation-core1-ler.p4" 2

/* 
 * include P4 switch port information 
 */
# 1 "./include/p4-switch-port.p4" 1
/*
 * Copyright 2019-present GÉANT RARE project
 *
 * Licensed under the Apache License, VersiOn 2.0 (the "License");
 * yOu may nOt use this file except in cOmpliance with the License.
 * YOu may Obtain a cOpy Of the License at
 *
 *     http://www.apache.Org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law Or agreed tO in writing, sOftware
 * distributed under the License is distributed On an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express Or implied.
 * See the License fOr the specific language gOverning permissiOns and
 * limitatiOns under the License.
 */
# 34 "vpn-over-bgp-isis-sr-operation-core1-ler.p4" 2

/*
 * egress_spec port encoded using 9 bits
 */
typedef bit<9> egress_spec_t;

/*
 * HW MAC address encoded using 48 bits
 */
typedef bit<48> mac_addr_t;

/*
 * IPv4 address encoded using 32 bits
 */
typedef bit<32> ipv4_addr_t;

/*
 * Nexthop using 16 bits
 */
typedef bit<9> nexthop_id_t;

/*
 * MPLS label using 20 bits
 */
typedef bit<20> label_t;


/*
 * Ethernet header: as a header type, order matters
 */
header ethernet_t {
   mac_addr_t dst_mac_addr;
   mac_addr_t src_mac_addr;
   bit<16> ethertype;
}

/*
 * LLC header: as a header type, order matters
 */
header llc_header_t {
   bit<8> dsap;
   bit<8> ssap;
   bit<8> control_;
}

/*
 * MPLS header: as a header type, order matters
 */
header mpls_t {
   label_t label;
   bit<3> exp;
   bit<1> bos;
   bit<8> ttl;
}

/*
 * ICMP header: as a header type, order matters
 */
header icmp_t {
    bit<16> type_code;
    bit<16> hdr_checksum;
}

/*
 * IPv4 header: as a header type, order matters
 */
header ipv4_t {
   bit<4> version;
   bit<4> ihl;
   bit<8> diffserv;
   bit<16> total_len;
   bit<16> identification;
   bit<3> flags;
   bit<13> frag_offset;
   bit<8> ttl;
   bit<8> protocol;
   bit<16> hdr_checksum;
   ipv4_addr_t src_addr;
   ipv4_addr_t dst_addr;
}

/*
 * IPv6 header: as a header type, order matters
 */
header ipv6_t {
    bit<4> version;
    bit<8> traffic_class;
    bit<20> flow_label;
    bit<16> payload_len;
    bit<8> next_hdr;
    bit<8> hop_limit;
    bit<128> src_addr;
    bit<128> dst_addr;
}


header tcp_t {
    bit<16> src_port;
    bit<16> dst_port;
    bit<32> seq_no;
    bit<32> ack_no;
    bit<4> data_offset;
    bit<4> res;
    bit<8> flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgent_ptr;
}

header udp_t {
    bit<16> src_port;
    bit<16> dst_port;
    bit<16> length_;
    bit<16> checksum;
}


struct ingress_intrinsic_metadata_t {
    bit<1> resubmit_flag;
    bit<48> ingress_global_timestamp;
    bit<16> mcast_grp;
    bit<1> deflection_flag;
    bit<1> deflect_on_drop;
    bit<2> enq_congest_stat;
    bit<2> deq_congest_stat;
    bit<13> mcast_hash;
    bit<16> egress_rid;
    bit<32> lf_field_list;
    bit<3> priority;
    bit<3> ingress_cos;
    bit<2> packet_color;
    bit<5> qid;
}

/*
 * L3 metadata type  
 */
struct l3_metadata_t {
    bit<2> lkp_ip_type;
    bit<4> lkp_ip_version;
    bit<8> lkp_ip_proto;
    bit<8> lkp_dscp;
    bit<8> lkp_ip_ttl;
    bit<16> lkp_l4_sport;
    bit<16> lkp_l4_dport;
    bit<16> lkp_outer_l4_sport;
    bit<16> lkp_outer_l4_dport;
    bit<20> vrf;
    bit<10> rmac_group;
    bit<1> rmac_hit;
    bit<2> urpf_mode;
    bit<1> urpf_hit;
    bit<1> urpf_check_fail;
    bit<16> urpf_bd_group;
    bit<1> fib_hit;
    bit<16> fib_nexthop;
    bit<2> fib_nexthop_type;
    bit<16> same_bd_check;
    bit<16> nexthop_index;
    bit<1> routed;
    bit<1> outer_routed;
    bit<8> mtu_index;
    bit<1> l3_copy;
    bit<16> l3_mtu_check;
    bit<16> egress_l4_sport;
    bit<16> egress_l4_dport;
}

/*
 * IPv4 metadata type
 */
struct ipv4_metadata_t {
    ipv4_addr_t lkp_ipv4_sa;
    ipv4_addr_t lkp_ipv4_da;
    bit<1> ipv4_unicast_enabled;
    bit<2> ipv4_urpf_mode;
}

/*
 * IPv6 metadata type
 */
struct ipv6_metadata_t {
    bit<128> lkp_ipv6_sa;
    bit<128> lkp_ipv6_da;
    bit<1> ipv6_unicast_enabled;
    bit<1> ipv6_src_is_link_local;
    bit<2> ipv6_urpf_mode;
}

struct tunnel_metadata_t {
    bit<5> ingress_tunnel_type;
    bit<24> tunnel_vni;
    bit<1> mpls_enabled;
    bit<20> mpls_label;
    bit<3> mpls_exp;
    bit<8> mpls_ttl;
    bit<5> egress_tunnel_type;
    bit<14> tunnel_index;
    bit<9> tunnel_src_index;
    bit<9> tunnel_smac_index;
    bit<14> tunnel_dst_index;
    bit<14> tunnel_dmac_index;
    bit<24> vnid;
    bit<1> tunnel_terminate;
    bit<1> tunnel_if_check;
    bit<4> egress_header_count;
    bit<8> inner_ip_proto;
    bit<1> skip_encap_inner;
}

/*
 * metadata type  
 */
struct metadata_t {
   nexthop_id_t nexthop_id;
   ingress_intrinsic_metadata_t intrinsic_metadata;
   l3_metadata_t l3_metadata;
   ipv4_metadata_t ipv4_metadata;
   ipv6_metadata_t ipv6_metadata;
   tunnel_metadata_t tunnel_metadata;
}

/*
 * Our P4 program header structure 
 */
struct headers {
   ethernet_t ethernet;
   mpls_t[3] mpls;
   ipv4_t ipv4;
   ipv6_t ipv6;
   llc_header_t llc_header;
   tcp_t tcp;
   udp_t udp;
}

/*
 * V1Model PARSER
 */
parser prs_main(packet_in packet,
                out headers hdr,
                inout metadata_t md,
                inout standard_metadata_t std_md) {

   state start {
      packet.extract(hdr.ethernet);
      md.intrinsic_metadata.priority = 0;
      transition select(hdr.ethernet.ethertype) {
         0 &&& 0xfe00: prs_llc_header; /* LLC SAP frame */
         0 &&& 0xfa00: prs_llc_header; /* LLC SAP frame */
         ETHERTYPE_MPLS_UCAST : prs_mpls;
         ETHERTYPE_IPV4: prs_ipv4;
         default: accept;
      }
   }

   state prs_mpls {
      packet.extract(hdr.mpls.next);
      transition select(hdr.mpls.last.bos) {
          1w0: prs_mpls;
          1w1: prs_mpls_bos;
          default: accept;
      }
   }

   state prs_mpls_bos {
      transition select((packet.lookahead<bit<4>>())[3:0]) {
         4w0x4: prs_ipv4; /* IPv4 only for now */
         //4w0x6: parse_ipv6; /* IPv6 is in next lab */
         default: accept; /* EoMPLS is pausing problem if we don't resubmit() */
      }
   }

   state prs_ipv4 {
      packet.extract(hdr.ipv4);
      md.ipv4_metadata.lkp_ipv4_da = hdr.ipv4.dst_addr;
      md.l3_metadata.lkp_ip_ttl = hdr.ipv4.ttl ;
      transition select(hdr.ipv4.frag_offset, hdr.ipv4.ihl, hdr.ipv4.protocol) {
         (13w0x0, 4w0x5, 8w0x6): prs_tcp;
         (13w0x0, 4w0x5, 8w0x11): prs_udp;
         default: accept;
      }
   }

   state prs_tcp {
      packet.extract(hdr.tcp);
      md.l3_metadata.lkp_outer_l4_sport = hdr.tcp.src_port;
      md.l3_metadata.lkp_outer_l4_dport = hdr.tcp.dst_port;
      transition select(hdr.tcp.dst_port) {
          16w179: prs_set_prio_med;
          16w639: prs_set_prio_med;
          16w646: prs_set_prio_med;
          default: accept;
      }
   }

  state prs_udp {
     packet.extract(hdr.udp);
     md.l3_metadata.lkp_outer_l4_sport = hdr.udp.src_port;
     md.l3_metadata.lkp_outer_l4_dport = hdr.udp.dst_port;
     transition select(hdr.udp.dst_port) {
           16w67: prs_set_prio_med;
           16w68: prs_set_prio_med;
           16w546: prs_set_prio_med;
           16w547: prs_set_prio_med;
           16w520: prs_set_prio_med;
           16w521: prs_set_prio_med;
           16w646: prs_set_prio_med;
           16w1985: prs_set_prio_med;
           default: accept;
     }
   }

   state prs_llc_header {
      packet.extract(hdr.llc_header);
      transition select(hdr.llc_header.dsap, hdr.llc_header.ssap) {
         /* 
          * (0xaa, 0xaa): prs_snap_header; 
          * From switch.p4 this case should be processed.
          * We are not there yet :-) 
          */
         (0xfe, 0xfe): prs_set_prio_med;
         default: accept;
      }
   }

   state prs_set_prio_med {
      md.intrinsic_metadata.priority = 3;
      transition accept;
   }
}

/*
 * V1Model CHECKSUM VERIFICATION 
 */
control ctl_verify_checksum(inout headers hdr, inout metadata_t metadata) {
    apply {
  }
}


/*
 * V1Model INGRESS
 */
control ctl_ingress(inout headers hdr,
                  inout metadata_t md,
                  inout standard_metadata_t std_md) {

   action act_rmac_set_nexthop() {
      /*
       * Store nexthop value in nexthop_id
       * CPU1:255 => DP1:1
       * CPU2:254 => DP2:2
       */
      md.nexthop_id = 256 - std_md.ingress_port;
   }

   /*
    * rmac
    */
   table tbl_rmac_fib {
      key = {
         hdr.ethernet.dst_mac_addr: exact;
      }
      actions = {
         act_rmac_set_nexthop;
         NoAction;
      }
      size = 1024;
      default_action = NoAction();
   }

   action act_ipv4_cpl_set_nexthop() {
      /*
       * Store nexthop value in nexthop_id
       * CPU1:255 => DP1:1
       * CPU2:254 => DP2:2
       */
      md.nexthop_id = 256 - std_md.ingress_port;
   }

   /*
    * IPv4 nexthop processing
    * output value will be the input lkp key of act_nexthop table
    */
   action act_ipv4_set_nexthop(nexthop_id_t nexthop_id) {
      /*
       * Store nexthop value in nexthop_id
       */
      md.nexthop_id = nexthop_id;
   }

   action act_ipv4_mpls_encap_set_nexthop(label_t vpn_label, label_t egress_label, nexthop_id_t nexthop_id) {
      /*
       * Egress packet is now a MPLS packet
       * (LABEL imposition)
       */
      hdr.ethernet.ethertype = ETHERTYPE_MPLS_UCAST;
      /*
       * Encapsulate MPLS header
       * And set egress label
       */
      hdr.mpls.push_front(2);
      hdr.mpls[0].setValid();
      hdr.mpls[0].label = egress_label;
      hdr.mpls[0].ttl = md.l3_metadata.lkp_ip_ttl;
      /*
       * MPLS VPN
       */

      hdr.mpls[1].setValid();
      hdr.mpls[1].label = vpn_label;
      hdr.mpls[1].ttl = md.l3_metadata.lkp_ip_ttl;
      hdr.mpls[1].bos = 1;

      /*
       * Set nexthop_id for further forwarding process
       */
      md.nexthop_id = nexthop_id;
   }

   table tbl_ipv4_fib_host {
      key = {
         /*
          * we match /32 host route
          */
         hdr.ipv4.dst_addr: exact;
         std_md.ingress_port: exact;
      }
      actions = {
         act_ipv4_cpl_set_nexthop;
         act_ipv4_set_nexthop;
         act_ipv4_mpls_encap_set_nexthop;
         NoAction;
      }
      size = 1024;
      default_action = NoAction();
   }

   table tbl_ipv4_fib_lpm {
      key = {
         /*
          * we match network route via Long Prefix Match kind operation
          */
         hdr.ipv4.dst_addr: lpm;
         std_md.ingress_port: exact;
      }
      actions = {
         act_ipv4_set_nexthop;
         act_ipv4_mpls_encap_set_nexthop;
         NoAction;
      }
      size = 512;
      default_action = NoAction();
   }

   action act_mpls_swap_set_nexthop(label_t egress_label, nexthop_id_t nexthop_id) {
      /*
       * Encapsulate MPLS header
       */
      hdr.mpls[0].label = egress_label;
      /*
       * Indicate nexthop_id
       */
      md.nexthop_id = nexthop_id;
   }

   action act_mpls_decap_ipv4_l3vpn() {
      /*
       * Egress packet is back now an IPv4 packet
       * (LABEL PHP )
       */
      hdr.ethernet.ethertype = ETHERTYPE_IPV4;
      /*
       * Decapsulate MPLS header
       */
      hdr.mpls[0].setInvalid();
      hdr.mpls[1].setInvalid();
      /*
       * Indicate nexthop_id
       */
   }

   table tbl_mpls_fib {
      key = {
         md.tunnel_metadata.mpls_label: exact;
      }
      actions = {
         /*
          * mpls core swap 
          */
         act_mpls_swap_set_nexthop;

         /*
          * mpls decapsulation if PHP  
          */
         act_mpls_decap_ipv4_l3vpn;

         /* 
          * Default action;
          */
         NoAction;
      }
        size = 1024;
        default_action = NoAction();
    }

   action act_cpl_opr_fib_hit(egress_spec_t egress_port) {
      /*
       * the egress_spec port is now the egress_port
       * set by the control plane entry
       */
      std_md.egress_spec = egress_port;
   }

   /*
    * Perform L3 forwarding
    */
   action act_ipv4_fib_hit(mac_addr_t dst_mac_addr, egress_spec_t egress_port) {
      /*
       * the packet header src_mac is now set to the previous header dst_mac
       */
      hdr.ethernet.src_mac_addr = hdr.ethernet.dst_mac_addr;

      /*
       * the new packet header dst_mac is now the dst_mac 
       * set by the control plane entry
       */
      hdr.ethernet.dst_mac_addr = dst_mac_addr;

      /*
       * the egress_spec port is set now the egress_port 
       * set by the control plane entry
       */
      std_md.egress_spec = egress_port;

      /*
       * We decrement the TTL
       */
      hdr.ipv4.ttl = hdr.ipv4.ttl -1;
   }

   /*
    * Discard via V1Model mark_to_drop(standard_metadata)
    */
   action act_ipv4_fib_discard() {
      mark_to_drop(std_md);
   }


   table tbl_nexthop {
      /*
       * custom metadat is used for the lookup key
       */
      key = {
         md.nexthop_id: exact;
         md.intrinsic_metadata.priority: exact;
      }
      actions = {
         act_cpl_opr_fib_hit;
         act_ipv4_fib_hit;
         act_ipv4_fib_discard;
      }
      size = 1024;
      default_action = act_ipv4_fib_discard();
   }

   apply {
      if (hdr.llc_header.isValid()) {
         tbl_rmac_fib.apply();
      } else if (hdr.mpls[0].isValid()) {
         if (!hdr.mpls[1].isValid()) {
            md.tunnel_metadata.mpls_label = hdr.mpls[0].label;
         } else {
            md.tunnel_metadata.mpls_label = hdr.mpls[1].label;
         }
         tbl_mpls_fib.apply();
      }

      if (hdr.ipv4.isValid() ) {
         /*                                    
          * we first consider host routes      
          */
         if (!tbl_ipv4_fib_host.apply().hit) {
            /*                                 
             * if no match consider LPM table  
             */
             tbl_ipv4_fib_lpm.apply();
         }
      }


      /*
       * nexthop value is now identified 
       * and stored in custom nexthop_id used for the lookup
       */
      tbl_nexthop.apply();
   }
}

/*
 * V1Model EGRESS
 */

control ctl_egress(inout headers hdr,
                 inout metadata_t md,
                 inout standard_metadata_t std_md) {
   apply {
   }
}

/*
 * V1Model CHECKSUM COMPUTATION
 */
control ctl_compute_checksum(inout headers hdr, inout metadata_t md) {
   apply {
      update_checksum(
         hdr.ipv4.isValid(),
            { hdr.ipv4.version,
       hdr.ipv4.ihl,
              hdr.ipv4.diffserv,
              hdr.ipv4.total_len,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.frag_offset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.src_addr,
              hdr.ipv4.dst_addr },
              hdr.ipv4.hdr_checksum,
              HashAlgorithm.csum16);
   }
}

/*
 * V1Model DEPARSER
 */
control ctl_deprs(packet_out packet, in headers hdr) {
    apply {
        /* parsed headers that have been modified
         * in ctl_ingress and ctl_ingress
	 * have to be added again into the packet.
         * for emission in the wire
         * Important: only headers that are valid() are re-emitted
         */

        /*
         * emit hdr
         */
        packet.emit(hdr);
    }
}

/*
 * V1Model P4 Switch define in v1model.p4
 */
V1Switch(
prs_main(),
ctl_verify_checksum(),
ctl_ingress(),
ctl_egress(),
ctl_compute_checksum(),
ctl_deprs()
) main;
